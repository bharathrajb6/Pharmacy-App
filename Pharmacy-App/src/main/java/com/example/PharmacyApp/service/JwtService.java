package com.example.PharmacyApp.service;import com.example.PharmacyApp.model.Persistance.User;import com.example.PharmacyApp.repository.TokenRepository;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.io.Decoders;import io.jsonwebtoken.security.Keys;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Service;import javax.crypto.SecretKey;import java.util.Date;import java.util.function.Function;@Servicepublic class JwtService {    @Autowired    private TokenRepository tokenRepository;    public String generateToken(User user) {        return Jwts.builder().subject(user.getUsername()).issuedAt(new Date(System.currentTimeMillis())).expiration(new Date(System.currentTimeMillis() + 24 * 60 * 1000)).signWith(getSignInKey()).compact();    }    private SecretKey getSignInKey() {        String SECRET_KEY = "QmBfQdj4+vxDXSrrYfItNTkuszwFaTClm5PC3Y1SVj2HkdIJNzSqLXXL9+zJM76R";        byte[] bytes = Decoders.BASE64.decode(SECRET_KEY);        return Keys.hmacShaKeyFor(bytes);    }    public String extractUsername(String token) {        return extractClaim(token, Claims::getSubject);    }    public Claims extractAllClaims(String token) {        return Jwts.parser().verifyWith(getSignInKey()).build().parseSignedClaims(token).getPayload();    }    public <T> T extractClaim(String token, Function<Claims, T> claimsTFunction) {        Claims claims = extractAllClaims(token);        return claimsTFunction.apply(claims);    }    public boolean isTokenValid(String token, UserDetails userDetails) {        String username = extractUsername(token);        boolean isValidToken = tokenRepository.findByToken(token).map(t -> !t.isIs_logged_out()).orElse(false);        return username.equals(userDetails.getUsername()) && !isTokenExpired(token) && isValidToken;    }    private boolean isTokenExpired(String token) {        return extractExpiration(token).before(new Date());    }    private Date extractExpiration(String token) {        return extractClaim(token, Claims::getExpiration);    }}