package com.example.PharmacyApp.service;import com.example.PharmacyApp.model.API.MedicationQuantity;import com.example.PharmacyApp.model.API.Order;import com.example.PharmacyApp.model.Persistance.Medication;import com.example.PharmacyApp.model.Persistance.Orders;import com.example.PharmacyApp.model.ResponseMessage;import com.example.PharmacyApp.repository.OrderRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import static com.example.PharmacyApp.utils.CommonUtils.createResponseMessage;import static com.example.PharmacyApp.utils.CommonUtils.generateRandomNumber;@Servicepublic class OrderService {    @Autowired    private OrderRepository orderRepository;    @Autowired    private MedicationService medicationService;    public ResponseMessage createOrder(Order request) throws Exception {        Orders orders = new Orders();        orders.setOrderID(generateRandomNumber(5));        orders.setUserID(request.getUserID());        orders.setMedication_list(convertListToString(request.getMedication_list()));        orders.setPurchased_date(request.getPurchased_date());        orders.setPrice(calculatePrice(request.getMedication_list()));        orderRepository.save(orders);        return createResponseMessage("Order is created successfully", 200, null, "SUCCESS");    }    private float calculatePrice(List<MedicationQuantity> medicationList) {        float amount = 0;        for (MedicationQuantity medicationQuantity : medicationList) {            Medication medication = medicationService.getMedicationDetailsById(medicationQuantity.getMedicationID());            if (medicationQuantity.getQuantity() <= medication.getStockQuantity()) {                float price = medication.getPrice() * medicationQuantity.getQuantity();                amount += price;                medication.setStockQuantity(medication.getStockQuantity() - medicationQuantity.getQuantity());            }        }        return amount;    }    private String convertListToString(List<MedicationQuantity> medicationList) {        List<String> medicationIDs = new ArrayList<>();        for (MedicationQuantity medicationQuantity : medicationList) {            medicationIDs.add(String.valueOf(medicationQuantity.getMedicationID()));        }        return String.join(",", medicationIDs);    }}